#!/bin/bash

TRAINER_IMAGE="soulshake/trainer-tools"

DEPENDENCIES="\
    awscli \
    ssh \
    curl \
    jq \
    bsdmainutils \
    pssh \
    python-pip \
    man \
    wkhtmltopdf \
    "

ENVVARS="\
    AWS_ACCESS_KEY_ID \
    AWS_SECRET_ACCESS_KEY \
    AWS_DEFAULT_REGION \
    "

if [[ -L $0 ]]; then
    export SCRIPT_DIR=$(dirname $(readlink $0))
else
    export SCRIPT_DIR=$(dirname $(readlink -f $0))
fi

run_natively() {
    scripts/trainer-cli "$@"
}

run_containerized() {
    docker run --rm -ti \
        --name trainer \
        -e AWS_ACCESS_KEY_ID \
        -e AWS_CONFIG_FILE \
        -e AWS_DEFAULT_PROFILE \
        -e AWS_DEFAULT_REGION \
        -e AWS_DEFAULT_OUTPUT \
        -e AWS_SECRET_ACCESS_KEY \
        -e AWS_SESSION_TOKEN \
        -e USER \
        -e SSH_AUTH_SOCK \
        -e SCRIPT_DIR=/trainer-tools \
        -e LOCAL_PATH=$SCRIPT_DIR \
        -v `pwd`:/workdir \
        -v $SCRIPT_DIR:/trainer-tools/ \
        -v $(dirname $SSH_AUTH_SOCK):$(dirname $SSH_AUTH_SOCK) \
        -w /workdir \
        --entrypoint "/trainer-tools/scripts/trainer-cli" \
        soulshake/trainer-tools "$@"
    
}

check_envvars() {
    # This script expects plain text output from the AWS CLI in some places
    export AWS_DEFAULT_OUTPUT=text

    for envvar in $ENVVARS; do
        if [ -z "${!envvar}" ]; then
            echo "Please export $envvar environment variable."
            return 1
        fi
    done
    return 0
}

dependencies_fulfilled() {
    for dependency in \
            ssh \
            curl \
            jq \
            bsdmainutils \
            pssh \
            python-pip \
            man \
            wkhtmltopdf \
            ; do
        type $dependency >/dev/null 2>&1 \
            || return 1 ;
            #|| { echo >&2 "$dependency not installed. Running in a container."; return 1;}
            #|| { echo >&2 "I require $dependency but it's not installed."; }
    done

    echo "All dependencies fulfilled. Running locally."
    return 0
}

trainer_image_exists_locally() {
    ret=$(docker inspect $TRAINER_IMAGE >/dev/null 2>&1)
    return $?
}

if ! check_envvars; then
    exit 1
fi

if dependencies_fulfilled; then
    run_natively "$@"
elif trainer_image_exists_locally; then
    run_containerized "$@"
else
    echo "Some dependencies are missing, and docker image $TRAINER_IMAGE doesn't exist locally."
    echo "Please do one of the following: "
    echo "- run \`docker build -t soulshake/trainer-tools\`"
    echo "- run \`docker pull soulshake/trainer-tools\`"
    echo "- install all dependencies: "
    for dep in $DEPENDENCIES; do echo "    $dep"; done
fi
