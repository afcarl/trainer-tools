#!/bin/bash
# Don't execute this script directly. Use ../trainer instead.
# To make the `trainer` script work, please
# get your own credentials and set the environment variables below.
#
# export AWS_ACCESS_KEY_ID=AKIAJF746WG4HR6IGEXQ
# export AWS_SECRET_ACCESS_KEY=AoXiWV+lCagS7xM9/svK8XfmmIGR26Napum86xAe
# AWS_DEFAULT_OUTPUT

set -e  # if we encounter an error, abort

die () {
    echo "$(tput setaf 1) $1 $(tput sgr0)"
    exit 1
}

greet() {
    #hello=$(aws iam get-user --output text | cut -f7)
    hello=$(aws iam get-user --query 'User.UserName')
    echo "Greetings, $hello!"
}

bold() {
    msg=$1
    echo "$(tput bold)$1$(tput sgr0)"
}

green() {
    msg=$1
    echo "$(tput setaf 2)$1$(tput sgr0)"
}

yellow(){
    msg=$1
    echo "$(tput setaf 3)$1$(tput sgr0)"
}

deploy_tag(){
    TOKEN=$1
    need_tag $TOKEN
    ips_file=tags/$TOKEN/ips.txt
    ln -sf $ips_file ips.txt

    # wait until we can at least run a simple command on the host via SSH before trying to deploy
    echo -n "Waiting for initial contact."
    ip=$(tail -1 ips.txt)
    ack="\ $ip reporting for duty."

    tput setaf 7
    while ! ssh -q -o "StrictHostKeyChecking=no" ubuntu@$ip "echo $ack"; do
        echo -n "."
        sleep 2
    done
    tput sgr0

    yellow "[[ Deploying tag $(tput bold)$TOKEN ]]$(tput sgr0)"
    source scripts/rc
    source scripts/postprep.rc
    echo && tput setaf 2 && bold "Finished deploying $TOKEN" && tput sgr0
}

test_tag(){
    ips_file=tags/$TOKEN/ips.txt
    yellow "Using random IP in $ips_file to run tests on $TOKEN"
    ip=$(shuf -n 1 $ips_file)
    test_vm $ip
    echo "Tests complete. You may want to run one of the following commands:"
    echo "trainer stop $TOKEN"
    echo "trainer cards $TOKEN"
}

test_vm() {
    ip=$1
    yellow "[[ Testing instance with IP $(tput bold)$ip $(tput sgr0) ]]"
    user=ubuntu
    # do it as ubuntu user 
    # sudo -u docker "docker ps"

    for cmd in "hostname" "hostname -i" "cat /etc/hosts" "hostnamectl status" "docker version" "docker-compose version" "docker-machine version" "docker images" "docker ps" "which fig" "curl --silent localhost:55555" "sudo ls -la /mnt/ | grep docker" "env" "whoami" "ls -la"; do
        echo "=== $cmd ==="
        ssh -A -q \
            -o "UserKnownHostsFile /dev/null" \
            -o "StrictHostKeyChecking=no" \
            $user@$ip "sudo --login -u docker $cmd"
        echo
    done
}

check_envvars() {
    # This script expects plain text output from the AWS CLI in some places
    export AWS_DEFAULT_OUTPUT=text

    for envvar in {AWS_ACCESS_KEY_ID,AWS_SECRET_ACCESS_KEY,AWS_DEFAULT_REGION}; do
        if [ -z "$envvar" ]
        then
            die "Please export $envvar environment variable."
        fi
    done
}

sync_keys() {
    # to test: 
    # unset SSH_AUTH_SOCK
    # eval $(ssh-agent) and run ssh-agent again

    # make sure ssh-add -l contains "RSA"
    ssh-add -l | grep -q RSA ||
        die "The output of \`ssh-add -l\` doesn't contain 'RSA'. Start the agent, add your keys?"

    SHORT_FINGERPRINT=$(ssh-add -l | grep RSA | head -n1 | cut -d " " -f 2 | tr -d : | cut -c 1-8)
    AWS_KEY_NAME="${SHORT_FINGERPRINT}-${USER}"
    #echo "Checking for AWS key named $AWS_KEY_NAME in region $AWS_DEFAULT_REGION..."
    echo "Syncing keys."
    if ! aws ec2 describe-key-pairs --key-name $AWS_KEY_NAME >> /dev/null; then
        # FIXME: "A client error ..." still prints here. It shouldn't.
        echo "No key named $AWS_KEY_NAME found in region $AWS_DEFAULT_REGION. Importing it."
        aws ec2 import-key-pair --key-name $AWS_KEY_NAME \
            --public-key-material "$(ssh-add -L \
                                    | grep -i RSA \
                                    | head -n1 \
                                    | cut -d " " -f 1-2)" >> /dev/null
        echo "Key pair imported with --key-name $AWS_KEY_NAME. Checking operation was successful..."

        if ! aws ec2 describe-key-pairs --key-name $AWS_KEY_NAME; then
            die "Somehow, importing the key didn't work. Make sure that 'ssh-add -l | grep RSA | head -n1' returns an RSA key?"
        else
            echo "Found AWS key named $AWS_KEY_NAME in region $AWS_DEFAULT_REGION. Proceeding with instance creation."
        fi
    else
        echo "Found key $AWS_KEY_NAME."
    fi
}

suggest_amis(){
    suggested_ami=$(./scripts/find-ubuntu-ami.sh -r $AWS_DEFAULT_REGION -a amd64 -v 15.10 -t hvm:ebs -N)
    echo "$suggested_ami"
}

get_token() {
    TOKEN=$(date +%Y-%m-%d-%H-%M-$USER)
    echo $TOKEN
}

get_ami() {
    # using find-ubuntu-ami script in `trainer-tools/scripts`:
    #AMI=$(./scripts/find-ubuntu-ami.sh -r $AWS_DEFAULT_REGION -a amd64 -v 15.10 -t hvm:ebs -N | grep -v ^REGION | head -1 | awk '{print $7}')
    #AMI=$(suggest_amis | grep -v ^REGION | head -1 | awk '{print $7}')
    case $AWS_DEFAULT_REGION in
    eu-central-1)
      AMI=ami-74a4bc18
      ;;
    eu-west-1)
      AMI=ami-cda312be
      ;;
    us-west-2)
      AMI=ami-495bbd29
      ;;
    us-east-1)
      AMI=ami-1711387d
      ;;
    esac
    echo $AMI
}

get_instance_ips_by_tag(){
    aws ec2 describe-instances \
        --output text \
        --filter "Name=tag:Name,Values=$1" \
        --query "Reservations[*].Instances[*].PublicIpAddress" \
            | tr "\t" "\n" \
            | sort -n -t . -k 1,1 -k 2,2 -k 3,3 -k 4,4  # sort IPs
    # JP: try [PublicIpAddress] to simplify a tiny bit
        #--query [PublicIpAddress] \
        # AJ: ? That doesn't work for me
}

get_instance_ids_by_tag(){
    IDS=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=$1" | grep ^INSTANCE | awk '{print $8}')
    echo "$IDS"
}

get_instance_ids_by_client_token(){
    IDS=$(aws ec2 describe-instances --filters "Name=client-token,Values=$1" | grep ^INSTANCES | awk '{print $8}'
)
    echo "$IDS"
}

list_tags(){
    #tags=$(aws ec2 describe-tags \
    #    --filters "Name=key,Values=Name" \
    #    --query 'Tags[*].Value[]' \
    #    --output json)
    tags=$(aws ec2 describe-instances \
        --query 'Reservations[].Instances[].Tags[?Key==`Name`].Value[]')

    echo "" > tags.txt
    for t in $tags; do
        echo "$t" >> tags.txt
    done
    cat tags.txt
}

print_tags(){
    # Print all "Name" tags in our region with their instance count
    echo "[#] [Tag]" | awk '{ printf " %7s %12s \n", $1, $2}'
    aws ec2 describe-instances \
        --filter "Name=tag:Name,Values=[*]" \
        --query "Reservations[*].Instances[*].[Tags[0].Value]" \
        | awk '{ printf " %-13s %-10s\n", $1, $2}' \
        | sort \
        | uniq -c
}

need_tag(){
    TAG=$1
    if [ -z "$TAG" ]; then
        die "Please specify a tag. Here's the list: $(print_tags)"
    fi
    echo $TAG

    # TODO: Tag validation?
}

make_tag(){
    # Generate cards for a given tag
    TAG=$1
    python ./scripts/ips-txt-to-html.py
    mv ips.html tags/$TAG
    ln -s tags/$TAG/ips.html ips.html
}

check_envvars

case "$1" in
account)
    greet
    aws ec2 describe-account-attributes --attribute-names max-instances --query 'AccountAttributes[*][AttributeValues]'
    ;;
ami)
    # A wrapper for scripts/find-ubuntu-ami.sh
    shift
    ./scripts/find-ubuntu-ami.sh -r $AWS_DEFAULT_REGION $*
    echo
    echo "Protip:"
    echo "./trainer ami -a amd64 -v 15.10 -t hvm:ebs -N | grep -v ^REGION | cut -d\" \" -f15"
    echo
    echo "Suggestions:"
    suggest_amis
    ;;
shell)
    # Get a shell in the container
    export PS1="trainer@$AWS_DEFAULT_REGION# "
    exec $SHELL
    ;;
opensg)
    # FIXME: What does this do?
    ec2-authorize -P tcp -p -1 default
    ec2-authorize -P udp -p -1 default
    ec2-authorize -P icmp -t -1:-1 default
    ;;
aws)
    # Wrapper to run arbitrary AWS CLI commands in this container
    "$@"
    ;;
env)
    env  # Print this container's environment variables
    ;;
start)
    # Create $2 instances

    if [ -z "$2" ]
    then
        echo "Indicate number of instances to start."
        exit 1
    fi

    greet       # Print our AWS username, to ease the pain of credential-juggling
    sync_keys   # Upload our SSH keys to AWS if needed, to be added to each VM's authorized_keys
    AMI=$(get_ami)  # Retrieve the AWS image ID
    TOKEN=$(get_token)  # generate a timestamp token for this batch of VMs

    tput bold && tput setaf 5
    echo "---------------------------"
    echo "Starting $2 instances:"
    echo "  Region: $AWS_DEFAULT_REGION"
    echo "  Tag: $TOKEN"
    echo "  AMI: $AMI"
    echo "---------------------------"
    tput sgr0

    aws ec2 run-instances \
        --key-name $AWS_KEY_NAME \
        --count $2 \
        --instance-type c3.large \
        --client-token $TOKEN \
        --image-id $AMI  \
    | head -1
    echo "---------------------------"

    # if instance creation succeeded, we should have some IDs
    IDS=$(get_instance_ids_by_client_token $TOKEN)
    if [ -z "$IDS" ]; then
        die "Instance creation failed."
    fi

    # Tag these new instances with a tag that is the same as the token
    aws ec2 create-tags --tag Key=Name,Value=$TOKEN --resources $IDS >> /dev/null

    # see aws ec2 wait instance-exists / instance-running / instance-status-ok

    echo "[------------------------------- Waiting for associations -----------------------------------]"
    for ID in $IDS;
    do
        while ! aws ec2 describe-instances --filters "Name=instance-id,Values=$ID" \
            | grep ^ASSOCIATION \
            | head -1
        do
            sleep 3
        done
    done

    tput setaf 2
    echo "[--------------------------------------------------------------------------------------------]"
    echo "        Successfully created $2 instances with tag: $(tput bold)$TOKEN $(tput sgr0)"

    # create a directory for this tag, for its ips.txt (and maybe generated cards, someday)
    mkdir -p tags/$TOKEN
    get_instance_ips_by_tag $TOKEN > tags/$TOKEN/ips.txt
    ln -s tags/$TOKEN $TOKEN
    ln -sf tags/$TOKEN/ips.txt ips.txt
    echo " IPs are located in tags/$TOKEN/ips.txt and are symlinked in ./ips.txt."
    echo "[--------------------------------------------------------------------------------------------]"
    tput sgr0

    deploy_tag $TOKEN
    echo "You may want to test by running one of the following commands:"
    echo "trainer test $TOKEN"
    echo "trainer stop $TOKEN"
    ;;
ids)
    TOKEN=$2
    need_tag $TOKEN

    echo "Lookup by tag $TOKEN:"
    IDS=$(get_instance_ids_by_tag $TOKEN)
    echo "$IDS"

    # Just in case we managed to create instances but weren't able to tag them
    echo "Lookup by client token $TOKEN:"
    IDS=$(get_instance_ids_by_client_token $TOKEN)
    echo "$IDS"
    ;;
ips)
    TOKEN=$2
    need_tag $TOKEN
    get_instance_ips_by_tag $TOKEN
    ;;
list)
    # list existing instances in a given batch
    # to list batches, see "tags" command
    TOKEN=$2
    need_tag $TOKEN
    get_instances_by_token() {
        aws ec2 describe-instances --output table \
                    --filter "Name=tag:Name,Values=$TOKEN" \
                    --query "Reservations[*].Instances[*].[ \
                        InstanceId, \
                        State.Name, \
                        Tags[0].Value, \
                        PublicIpAddress, \
                        InstanceType \
                        ]"
    }
    result=$(get_instances_by_token $TOKEN)
    if [[ -z $result ]]; then
        echo "No instances found with tag $TOKEN in region $AWS_DEFAULT_REGION."
    else
        header={"ID State Tags IP Type" \
            | awk '{ printf "%9s %12s %15s %20s %15s \n", \
            $1, $2, $3, $4, $5}' # column -t -c 70}
        echo "                      ====  $TOKEN  ===="
        echo "$header"
        echo "$result"
    fi
    # With column headers (but can't specify column order):
    #aws ec2 describe-instances --output text \
    #    --filter "Name=tag:Name,Values=2016-03-03-18-48-aj" \
    #    --query "Reservations[*].Instances[*].{PublicIpAddress:PublicIpAddress,State:State}" 
    ;;
tags)
    print_tags
    ;;
tokens)
    aws ec2 describe-instances --output text \
            --query 'Reservations[*].Instances[*].[ClientToken]' \
        | sort -u
    ;;
regions)
    # Print list of AWS EC2 regions, highlighting ours ($AWS_DEFAULT_REGION) in the list
    # If our $AWS_DEFAULT_REGION is not valid, the error message will be pretty descriptive:
    # Could not connect to the endpoint URL: "https://ec2.foo.amazonaws.com/"
    aws ec2 describe-regions | awk '{print $3}' | grep --color=auto $AWS_DEFAULT_REGION -C50

    ;;
stop)
    TOKEN=$2
    need_tag $TOKEN
    IDS=$(get_instance_ids_by_tag $TOKEN)
    if [ -z "$IDS" ]; then
        die "Invalid tag."
    else
        echo "Deleting instances with tag $TOKEN."
    fi

    echo "$IDS" \
        | xargs -r aws ec2 terminate-instances --instance-ids \
        | grep ^TERMINATINGINSTANCES

    # append -stopped to the directory we created
    mv tags/$TOKEN tags/$TOKEN-stopped
    rm ips.txt
    rm $TOKEN
    ln -s tags/$TOKEN-stopped $TOKEN-stopped
    ;;
deploy)
    TOKEN=$2
    need_tag $TOKEN
    deploy_tag $TOKEN
    # test_tag $TOKEN
    ;;
test)
    TOKEN=$2
    need_tag $TOKEN
    echo "Testing $TOKEN."
    test_tag $TOKEN
    ;;
cards)
    TOKEN=$2
    need_tag $TOKEN
    make_tag $TOKEN
    ;;
ssh)
    user=docker
    ip=$(tail -1 ips.txt)
    shift
    cmd=$*
    ssh -q -o "StrictHostKeyChecking=no" $user@$ip "$cmd"
    ;;
workshop)
    # set active workshop
    workshop=$2
    if [ -z $workshop ]; then
        die "Please specify a workshop."
    fi
    if [ -f workshops/$workshop/settings.txt ]; then
        ln -sf workshops/$workshop/settings.txt settings.txt
        echo "Activated workshop $workshop (see ./settings.txt)."
    else
        echo "workshops/$workshop/settings.txt doesn't exist."
        echo "Try one of these:"
        ls --color=always -C workshops
        exit 1
    fi

    ;;
*)
    echo "$0 <start|stop|deploy|ips|ids|tags|tokens|account|regions|ami|aws|env|opensg|shell|workshop> [n-instances|token...]"
    ;;
esac

