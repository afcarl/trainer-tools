#!/bin/bash

set -e  # if we encounter an error, abort

# To make the `trainer` script work, please
# get your own credentials and set the environment variables below.
#
# export AWS_ACCESS_KEY_ID=AKIAJF746WG4HR6IGEXQ
# export AWS_SECRET_ACCESS_KEY=AoXiWV+lCagS7xM9/svK8XfmmIGR26Napum86xAe
# AWS_DEFAULT_OUTPUT

die () {
    echo "$1"
    exit 1
}

greet() {
    hello=$(aws iam get-user --output text | cut -f7)
    echo "Greetings, $hello!"
}

pssh () {
    HOSTFILES="hosts ips.txt /tmp/hosts"

    # zsh doesn't split words like bash does
    # this shouldn't be necessary since we're in a container
    #if [ `basename $0`='zsh' ]; then
    #    setopt shwordsplit
    #fi

    for HOSTFILE in $HOSTFILES; do
        [ -f $HOSTFILE ] && echo "Found hostfile! Using: $HOSTFILE" && break
    done

    [ -f $HOSTFILE ] || {
        echo "No hostfile found (tried $HOSTFILES)"
        return
    }

    parallel-ssh -h $HOSTFILE -l docker \
    -O UserKnownHostsFile=/dev/null -O StrictHostKeyChecking=no \
    -O ForwardAgent=yes \
    "$@"
}

pcopykey () {
    ssh-add -L | pssh --askpass --send-input \
    "mkdir -p .ssh; tee .ssh/authorized_keys"

    ssh-add -L | pssh --send-input \
    "sudo mkdir -p /root/.ssh; sudo tee /root/.ssh/authorized_keys"
}

sync_keys() {
    # to test: 
    # unset SSH_AUTH_SOCK
    # eval $(ssh-agent) and run ssh-agent again

    # make sure ssh-add -l contains "RSA"
    ssh-add -l | head -n1 | grep -q RSA || {
        die "The output of \`ssh-add -l\` doesn't contain 'RSA'. Start the agent, add your keys?"
        }

    SHORT_FINGERPRINT=$(ssh-add -l | head -n 1 | cut -d " " -f 2 | tr -d : | cut -c 1-8)
    AWS_KEY_NAME="${SHORT_FINGERPRINT}-${USER}"
    echo "Found local key with fingerprint $SHORT_FINGERPRINT."

    echo "Checking for AWS key named $AWS_KEY_NAME in region $AWS_DEFAULT_REGION..."
    if ! aws ec2 describe-key-pairs --key-name $AWS_KEY_NAME; then

        echo "No AWS key named $AWS_KEY_NAME found. Running \`aws ec2 import-key-pair --keyname $AWS_KEY_NAME\`..."
        aws ec2 import-key-pair --key-name $AWS_KEY_NAME --public-key-material "$(ssh-add -L | head -n 1 | cut -d " " -f 1-2)"
    else
        echo "Key pair imported with --key-name $AWS_KEY_NAME. Checking operation was successful..."
    fi

    if ! aws ec2 describe-key-pairs --key-name $AWS_KEY_NAME; then
        die "Somehow, importing the key didn't work. Make sure that 'ssh-add -l | head -n 1' returns an RSA key?"
    else
        echo "Found AWS key named $AWS_KEY_NAME. Proceeding with instance creation."
    fi
}

check_envvars() {
    # This script only works if the AWS CLI provides plain text output
    export AWS_DEFAULT_OUTPUT=text

    for envvar in {AWS_ACCESS_KEY_ID,AWS_SECRET_ACCESS_KEY,AWS_DEFAULT_REGION}; do
        if [ -z "$envvar" ]
        then
            die "Please export $envvar environment variable."
        #else
        #    echo "$envvar: ${!envvar}."
        fi
    done
}

suggest_amis(){
    suggested_ami=$(./find-ubuntu-ami.sh -r $AWS_DEFAULT_REGION -a amd64 -v 15.10 -t hvm:ebs -N)
    echo "$suggested_ami"
}

get_token() {
    TOKEN=$(date +%Y-%m-%d-%H-%M-$USER)
    echo $TOKEN
}

get_ami() {
    # using find-ubuntu-ami script in `trainer-tools/`:
    #AMI=$(./find-ubuntu-ami.sh -r $AWS_DEFAULT_REGION -a amd64 -v 15.10 -t hvm:ebs -N | grep -v ^REGION | head -1 | awk '{print $7}')
    case $AWS_DEFAULT_REGION in
    eu-central-1)
      AMI=ami-74a4bc18
      ;;
    eu-west-1)
      AMI=ami-cda312be
      ;;
    us-west-2)
      AMI=ami-495bbd29
      ;;
    us-east-1)
      AMI=ami-1711387d
      ;;
    esac
    echo $AMI
}

get_instance_ids_by_tag(){
    IDS=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=$1" | grep ^INSTANCE | awk '{print $8}')
    echo "$IDS"
}

get_instance_ids_by_client_token(){
    IDS=$(aws ec2 describe-instances --filters "Name=client-token,Values=$1" | grep ^INSTANCES | awk '{print $8}'
)
    echo "$IDS"
}

check_envvars

case "$1" in
ami)
    shift
    ./find-ubuntu-ami.sh -r $AWS_DEFAULT_REGION $*
    echo
    echo "Protip:"
    echo "./trainer ami -a amd64 -v 15.10 -t hvm:ebs -N | grep -v ^REGION | cut -d\" \" -f15"
    echo
    echo "Suggestions:"
    suggest_amis
    ;;
shell)
  export PS1="trainctl@$REGION# "
  exec $SHELL
  ;;
opensg)
  ec2-authorize -P tcp -p -1 default
  ec2-authorize -P udp -p -1 default
  ec2-authorize -P icmp -t -1:-1 default
  ;;
aws)
  "$@"
  ;;
env)
  env
  ;;
start)
    greet # Print our AWS username, to ease the pain of credential-juggling
    sync_keys
    AMI=$(get_ami)

    if [ -z "$2" ]
    then
        echo "Indicate number of instances to start."
        exit 1
    fi

    # generate a timestamp token
    TOKEN=$(get_token)

    echo "Starting $2 instances:"
    echo "  Region: $AWS_DEFAULT_REGION"
    echo "  Tag: $TOKEN"
    echo "  AMI: $AMI"

    aws ec2 run-instances \
    --user-data cloudinit.sh \
    --count $2 \
    --instance-type c3.large \
    --client-token $TOKEN \
    --image-id $AMI  | head -2  # Show the reservation number? and first line showing instance details

    # if instance creation succeeded, we should have some IDs
    IDS=$(get_instance_ids_by_client_token $TOKEN)
    if [ -z "$IDS" ]; then
        die "Instance creation failed."
    else
        echo "Instances created with client-token: $TOKEN"
        echo "$IDS" | wc -l
    fi

    # Tag these new instances with a tag that is the same as the token
    aws ec2 create-tags --tag Key=Name,Value=$TOKEN --resources $IDS
    for ID in $IDS;
    do
        while ! aws ec2 describe-instances --filters "Name=instance-id,Values=$ID" | grep ^ASSOCIATION
        do
            echo "...waiting for association..."
            sleep 3
        done
    done
    echo "Successfully created $2 instances with tag: $TOKEN"
    ;;
ids)
    if [ -z "$2" ]
    then
        die "Please specify a tag."
    fi
    TOKEN=$2
    echo "Lookup by tag $TOKEN:"
    IDS=$(get_instance_ids_by_tag $TOKEN)
    echo "$IDS"
    echo "Lookup by client token $TOKEN:"
    IDS=$(get_instance_ids_by_client_token $TOKEN)
    echo "$IDS"
;;
ips)
    if [ -z "$2" ]
    then
        die "Please specify tag."
    fi
    TOKEN=$2
    aws ec2 describe-instances --output text \
        --filter "Name=tag:Name,Values=$TOKEN" \
        --query "Reservations[*].Instances[*].PublicIpAddress"
    ;;
list)
    aws ec2 describe-instances | grep ^TAGS | sort --unique
    ;;
tags)
    aws ec2 describe-instances | grep ^TAGS | sort --unique
    ;;
tokens)
    aws ec2 describe-instances --output json | grep ClientToken
    ;;
deploy)
    echo "NOT IMPLEMENTED"
    ;;
stop)
  if [ -z "$2" ]
  then
    die "Please specify tag."
  fi
  TOKEN=$2
  echo "Deleting all instances with tag $TOKEN."
  exit

  #ec2-describe-instances --filter tag:Name=$2 | grep ^INSTANCE | awk '{print $2}' | xargs ec2-terminate-instances

  #aws ec2 describe-instances --filters "Name=tag:training,Values=$TOKEN" | grep ^INSTANCES | awk '{print $8}' | xargs aws ec2 terminate-instances --dry-run --instance-ids
  ;;
*)
  echo "$0 <start|stop|ips|tags|opensg|shell> [n-instances|token...]"
  ;;
esac

