#!/bin/bash

set -e  # if we encounter an error, abort

# To make the `trainer` script work, please
# get your own credentials and set the environment variables below.
#
# export AWS_ACCESS_KEY_ID=AKIAJF746WG4HR6IGEXQ
# export AWS_SECRET_ACCESS_KEY=AoXiWV+lCagS7xM9/svK8XfmmIGR26Napum86xAe
# AWS_DEFAULT_OUTPUT

die () {
    echo "$1"
    exit 1
}

greet() {
    hello=$(aws iam get-user --output text | cut -f7)
    # JP: aws iam get-user --query 'User.UserName'
    echo "Greetings, $hello!"
}

check_envvars() {
    # This script only works if the AWS CLI provides plain text output
    export AWS_DEFAULT_OUTPUT=text

    for envvar in {AWS_ACCESS_KEY_ID,AWS_SECRET_ACCESS_KEY,AWS_DEFAULT_REGION}; do
        if [ -z "$envvar" ]
        then
            die "Please export $envvar environment variable."
        #else
        #    echo "$envvar: ${!envvar}."
        fi
    done
}

pssh () {
    HOSTFILES="hosts ips.txt /tmp/hosts"

    # zsh doesn't split words like bash does
    # this shouldn't be necessary since we're in a container
    #if [ `basename $0`='zsh' ]; then
    #    setopt shwordsplit
    #fi

    for HOSTFILE in $HOSTFILES; do
        [ -f $HOSTFILE ] && echo "Found hostfile! Using: $HOSTFILE" && break
    done

    [ -f $HOSTFILE ] || {
        echo "No hostfile found (tried $HOSTFILES)"
        return
    }

    parallel-ssh -h $HOSTFILE -l docker \
    -O UserKnownHostsFile=/dev/null -O StrictHostKeyChecking=no \
    -O ForwardAgent=yes \
    "$@"
}

pcopykey () {
    ssh-add -L | pssh --askpass --send-input \
    "mkdir -p .ssh; tee .ssh/authorized_keys"

    ssh-add -L | pssh --send-input \
    "sudo mkdir -p /root/.ssh; sudo tee /root/.ssh/authorized_keys"
}

sync_keys() {
    # to test: 
    # unset SSH_AUTH_SOCK
    # eval $(ssh-agent) and run ssh-agent again

    # make sure ssh-add -l contains "RSA"
    ssh-add -l | head -n1 | grep -q RSA ||
        die "The output of \`ssh-add -l\` doesn't contain 'RSA'. Start the agent, add your keys?"

    SHORT_FINGERPRINT=$(ssh-add -l | head -n 1 | cut -d " " -f 2 | tr -d : | cut -c 1-8)

    AWS_KEY_NAME="${SHORT_FINGERPRINT}-${USER}"
    echo "Checking for AWS key named $AWS_KEY_NAME in region $AWS_DEFAULT_REGION..."
    if ! aws ec2 describe-key-pairs --key-name $AWS_KEY_NAME; then
        echo "No key found. Importing it."
        aws ec2 import-key-pair --key-name $AWS_KEY_NAME \
            --public-key-material "$(ssh-add -L \
            | head -n 1 | cut -d " " -f 1-2)"
        echo "Key pair imported with --key-name $AWS_KEY_NAME. Checking operation was successful..."

        if ! aws ec2 describe-key-pairs --key-name $AWS_KEY_NAME; then
            die "Somehow, importing the key didn't work. Make sure that 'ssh-add -l | head -n 1' returns an RSA key?"
        else
            echo "Found AWS key named $AWS_KEY_NAME. Proceeding with instance creation."
        fi
    else
        echo "Found key $AWS_KEY_NAME."
    fi
}

suggest_amis(){
    suggested_ami=$(./find-ubuntu-ami.sh -r $AWS_DEFAULT_REGION -a amd64 -v 15.10 -t hvm:ebs -N)
    echo "$suggested_ami"
}

get_token() {
    TOKEN=$(date +%Y-%m-%d-%H-%M-$USER)
    echo $TOKEN
}

get_ami() {
    # using find-ubuntu-ami script in `trainer-tools/`:
    #AMI=$(./find-ubuntu-ami.sh -r $AWS_DEFAULT_REGION -a amd64 -v 15.10 -t hvm:ebs -N | grep -v ^REGION | head -1 | awk '{print $7}')
    #AMI=$(suggest_amis | grep -v ^REGION | head -1 | awk '{print $7}')
    case $AWS_DEFAULT_REGION in
    eu-central-1)
      AMI=ami-74a4bc18
      ;;
    eu-west-1)
      AMI=ami-cda312be
      ;;
    us-west-2)
      AMI=ami-495bbd29
      ;;
    us-east-1)
      AMI=ami-1711387d
      ;;
    esac
    echo $AMI
}

get_instance_ips_by_tag(){
    aws ec2 describe-instances \
        --output text \
        --filter "Name=tag:Name,Values=$1" \
        --query "Reservations[*].Instances[*].PublicIpAddress" \
            | tr "\t" "\n" \
            | sort -n -t . -k 1,1 -k 2,2 -k 3,3 -k 4,4  # sort IPs
    # JP: try [PublicIpAddress] to simplify a tiny bit
        #--query [PublicIpAddress] \
        # AJ: ? That doesn't work for me
}

get_instance_ids_by_tag(){
    IDS=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=$1" | grep ^INSTANCE | awk '{print $8}')
    echo "$IDS"
}

get_instance_ids_by_client_token(){
    IDS=$(aws ec2 describe-instances --filters "Name=client-token,Values=$1" | grep ^INSTANCES | awk '{print $8}'
)
    echo "$IDS"
}

list_tags(){
    #tags=$(aws ec2 describe-tags \
    #    --filters "Name=key,Values=Name" \
    #    --query 'Tags[*].Value[]' \
    #    --output json)
    tags=$(aws ec2 describe-instances \
        --query 'Reservations[].Instances[].Tags[?Key==`Name`].Value[]')

    echo "" > tags.txt
    for t in $tags; do
        echo "$t" >> tags.txt
    done
    cat tags.txt
}

print_tags(){
    echo "Printing tags"
    echo "# [Key] [Value]" | awk '{ printf " %6s %6s %15s \n", $1, $2, $3}'
    aws ec2 describe-instances \
        | grep ^TAGS \
        | awk '{ printf " %-13s %-10s\n", $2, $3}' \
        | sort \
        | uniq -c
}

need_tag(){
    TAG=$1
    if [ -z "$TAG" ]; then
        echo "Please specify a tag. Here's the list:"
        die "$(print_tags)"
    fi

    #all_tags=$(list_tags | uniq)
    #valid_tag=$(cat tags.txt | grep "$TAG" -m 1)
    #if [ -z $valid_tag ]; then
    #    echo "$1 is not a valid tag. Here's the list:"
    #    die "$all_tags"
    #else
    #    echo "$1 is a valid tag."
    #    echo $valid_tag
    #fi
}

check_envvars

case "$1" in
ami)
    shift
    ./find-ubuntu-ami.sh -r $AWS_DEFAULT_REGION $*
    echo
    echo "Protip:"
    echo "./trainer ami -a amd64 -v 15.10 -t hvm:ebs -N | grep -v ^REGION | cut -d\" \" -f15"
    echo
    echo "Suggestions:"
    suggest_amis
    ;;
shell)
  export PS1="trainctl@$REGION# "
  exec $SHELL
  ;;
opensg)
  ec2-authorize -P tcp -p -1 default
  ec2-authorize -P udp -p -1 default
  ec2-authorize -P icmp -t -1:-1 default
  ;;
aws)
  "$@"
  ;;
env)
  env
  ;;
start)
    greet # Print our AWS username, to ease the pain of credential-juggling
    sync_keys
    AMI=$(get_ami)

    if [ -z "$2" ]
    then
        echo "Indicate number of instances to start."
        exit 1
    fi

    # generate a timestamp token
    TOKEN=$(get_token)

    echo "----------------------"
    echo "Starting $2 instances:"
    echo "  Region: $AWS_DEFAULT_REGION"
    echo "  Tag: $TOKEN"
    echo "  AMI: $AMI"
    echo "----------------------"

    aws ec2 run-instances \
    --user-data file://cloudinit.sh \
    --key-name $AWS_KEY_NAME \
    --count $2 \
    --instance-type c3.large \
    --client-token $TOKEN \
    --image-id $AMI  | head -2  # Show the reservation number? and first line showing instance details

    # if instance creation succeeded, we should have some IDs
    IDS=$(get_instance_ids_by_client_token $TOKEN)
    if [ -z "$IDS" ]; then
        die "Instance creation failed."
    else
        count=$(echo "$IDS" | wc -l)
        echo "$count instances created with client-token: $TOKEN"
    fi

    # Tag these new instances with a tag that is the same as the token
    aws ec2 create-tags --tag Key=Name,Value=$TOKEN --resources $IDS
    for ID in $IDS;
    do
        while ! aws ec2 describe-instances --filters "Name=instance-id,Values=$ID" \
            | grep ^ASSOCIATION \
            | head -1
        do
            sleep 3
        done
    done
    echo "Successfully created $2 instances with tag: $TOKEN"
    mkdir $TOKEN
    get_instance_ips_by_tag $TOKEN > $TOKEN/ips.txt
    ;;
ids)
    TOKEN=$2
    need_tag $TOKEN

    echo "Lookup by tag $TOKEN:"
    IDS=$(get_instance_ids_by_tag $TOKEN)
    echo "$IDS"

    # Just in case we managed to create instances but weren't able to tag them
    echo "Lookup by client token $TOKEN:"
    IDS=$(get_instance_ids_by_client_token $TOKEN)
    echo "$IDS"
    ;;
ips)
    TOKEN=$2
    need_tag $TOKEN
    get_instance_ips_by_tag $TOKEN
    ;;
list)
    TOKEN=$2
    need_tag $TOKEN
    echo "ID State Tags IP Type" \
        | awk '{ printf "%-15s %-20s %-15s %-10s %-30s \n", \
        $1, $2, $3, $4, $5}' # column -t -c 70
    aws ec2 describe-instances --output table \
        --filter "Name=tag:Name,Values=$2" \
        --query "Reservations[*].Instances[*].[ \
            InstanceId, \
            State.Name, \
            Tags[0].Value, \
            PublicIpAddress, \
            InstanceType \
            ]"
    # With column headers (but can't specify column order):
    #aws ec2 describe-instances --output text \
    #    --filter "Name=tag:Name,Values=2016-03-03-18-48-aj" \
    #    --query "Reservations[*].Instances[*].{PublicIpAddress:PublicIpAddress,State:State}" 
    ;;
tags)
    print_tags
    ;;
tokens)
    aws ec2 describe-instances --output text \
            --query 'Reservations[*].Instances[*].[ClientToken]' \
        | sort -u
    ;;
stop)
    TOKEN=$2
    need_tag $TOKEN
    IDS=$(get_instance_ids_by_tag $TOKEN)
    echo "$IDS"
    if [ -z "$IDS" ]; then
        die "Invalid tag."
    else
        echo "Deleting instances with tag $TOKEN."
    fi

    echo "$IDS" | xargs -r aws ec2 terminate-instances --instance-ids \
        | grep ^TERMINATINGINSTANCES

    # append -stopped to the directory we created
    mv $TOKEN $TOKEN-stopped
    ;;
*)
    echo "$0 <start|stop|ips|ids|tags|tokens|ami|aws|env|opensg|shell> [n-instances|token...]"
    ;;
esac

